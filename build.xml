<?xml version="1.0" encoding="UTF-8"?>
<!--
   Makefile for OperaDriver.  Available tasks:

   ant          defaults to compile.
   ant compile  will compile source into class-files.
   ant clean    removes binary (/bin) directory.
   ant jar      creates a jar file in package directory (/pkg).

   Use “ant jar” for normal releases.

   ant test     compiles test classes and generates a test jar and runs junit tests
-->

<project basedir="." default="compile" name="OperaDriver">

  <!--
      Variables
  -->
  <path id="webdriver-opera.path">
    <pathelement location="bin" />
    <fileset dir="lib" includes="**/*.jar" />
  </path>

  <path id="pkg.dir.path">
    <pathelement location="pkg" />
    <fileset dir="pkg"/>
  </path>

  <path id="test.dir.path">
    <pathelement location="test/com/opera/core/systems" />
  </path>

  <!-- Will remove new line in version file. -->
  <replace file="VERSION">
    <replacetoken><![CDATA[
]]></replacetoken>
    <replacevalue></replacevalue>
  </replace>
  <loadfile srcfile="VERSION" property="version" />

  <!--
      Targets
  -->

  <!-- Delete the bin and pkg dirs -->
  <target name="clean">
    <delete dir="bin" />
    <delete dir="pkg" />
    <delete dir="docs" />
    <delete dir="test-output" />
    <delete dir="test-reports" />
    <delete dir="release" />
  </target>

  <!-- Compile all classes after cleaning-->
  <target name="compile" depends="clean">
    <fileset dir="bin" />
    <mkdir dir="bin" />

    <copy includeemptydirs="false" todir="bin">
      <fileset dir="src">
      	<exclude name="**/*.launch" />
      	<exclude name="**/*.java" />
      </fileset>
    </copy>

    <javac debug="true" destdir="bin" includeantruntime="false">
      <src path="src" />
      <classpath refid="webdriver-opera.path" />
    </javac>
  </target>

  <!-- Build the jar -->
  <target name="jar" depends="compile">
    <mkdir dir="pkg" />

    <jar destfile="pkg/webdriver-opera-${version}.jar">
      <fileset dir="bin" includes="**/*.class" />
      <fileset dir="bin" includes="**/*.properties" />
      <manifest>
      	<attribute name="Main-Class" value="com.opera.core.systems.OperaDriver" />
      	<attribute name="Implementation-Version" value="${version}" />
      </manifest>
    </jar>

    <!-- Add the launchers. We do it this way to preserve their permissions.
    In Ant 1.8+ we can add preservepermissions="true" to the <jar> element -->
    <exec executable="zip" os="Linux">
      <arg value="-r" />
      <arg value="pkg/webdriver-opera-${version}.jar" />
      <arg value="launcher/" />
    </exec>
  </target>

  <!-- Compile any modified classes including test classes -->
  <target name="test_compile">
    <fileset dir="bin" />
    <mkdir dir="bin" />

    <copy includeemptydirs="false" todir="bin">
      <fileset dir="src">
      	<exclude name="**/*.launch" />
      	<exclude name="**/*.java" />
      </fileset>
    </copy>

    <javac debug="true" destdir="bin" includeantruntime="false">
      <src path="src" />
      <classpath refid="webdriver-opera.path" />
    </javac>

    <javac debug="true" destdir="test" includeantruntime="false">
      <src path="test" />
      <classpath refid="webdriver-opera.path" />
    </javac>
  </target>

  <!-- Build a test jar after running test_compile -->
  <target name="test_jar" depends="test_compile">
  	<delete dir="pkg" />
    <mkdir dir="pkg" />

  <replace file="VERSION">
    <replacetoken><![CDATA[
]]></replacetoken>
    <replacevalue></replacevalue>
  </replace>
  <loadfile srcfile="VERSION" property="version" />

    <jar destfile="pkg/webdriver-opera-${version}.jar">
      <fileset dir="bin" includes="**/*.class" />
      <manifest>
      	<attribute name="Main-Class" value="com.opera.core.systems.OperaDriver" />
      	<attribute name="Implementation-Version" value="${version}" />
      </manifest>
    </jar>
  </target>

  <!-- Run all junit tests -->
  <target name="test" depends="clean, test_jar">
    <mkdir dir="test-output" />
    <mkdir dir="test-reports" />
    <junit fork="yes" haltonfailure="no" printsummary="yes" showoutput="no" outputtoformatters="no">
      <formatter type="xml" usefile="true" />

      <batchtest todir="test-output">
        <fileset dir="test" includes="**/*Test.class" />
      </batchtest>

      <classpath refid="webdriver-opera.path" />
    	<classpath location="test" />
    </junit>
    <junitreport todir="test-output">
      <fileset dir="test-output"/>
      <report todir="test-reports"/>
    </junitreport>
    <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
  </target>


  <target name="doc">
    <javadoc destdir="docs" doctitle="OperaDriver" access="public" author="true">
      <classpath>
        <!-- Include all the jars except selenium, as we're getting the docs
        straight from the source -->
        <dirset dir="lib">
          <include name="*.jar"/>
          <exclude name="selenium-common.jar"/>
        </dirset>
      </classpath>

      <!-- include our source, and the selenium source so that we can inherit
      the javadocs -->
      <sourcepath>
        <pathelement location="src" />
        <pathelement location="../selenium/java/client/src" />
      </sourcepath>

      <!-- only generate docs for Opera stuff, not selenium as well -->
      <package name="com.opera.core.systems.*" />

      <!-- Link to online selenium documentation, and the Java docs -->
      <link href="http://webdriver.googlecode.com/svn/javadoc/"/>
      <link href="http://download.oracle.com/javase/1.5.0/docs/api/"/>
    </javadoc>
  </target>

  <target name="release" depends="clean,jar,doc">
    <mkdir dir="release" />
    <property name="release-zip.name" value="operadriver-${version}" />
    <zip destfile="release/${release-zip.name}.zip">
      <!-- Add the docs -->
      <zipfileset prefix="${release-zip.name}/docs" dir="docs/" />
      <!-- Add the examples -->
      <zipfileset prefix="${release-zip.name}/examples" dir="examples/" />
      <!-- add OperaDriver jar to the lib directory -->
      <zipfileset prefix="${release-zip.name}/lib" dir="pkg" />
      <!-- Add all the jar libs -->
      <zipfileset prefix="${release-zip.name}/lib" dir="lib" excludes="junit*.jar"/>
      <zipfileset prefix="${release-zip.name}" dir="." includes="README.txt AUTHORS.txt LICENSE.txt"/>
    </zip>
  </target>
</project>