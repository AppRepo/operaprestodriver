syntax = scope;

/**
 *
 * Changelog
 * ---------
 *
 * :1.0: Initial release.
 * :1.1: Added `OutputType` to request selftest output in SPARTAN readable
 *       form.
 * :2.0: Changed API for more granularity while running tests and reporting
 *       through `SelftestResult.`
 */

service Selftest
{
    option (version) = "2.0";
    option (cpp_class) = OpScopeSelftest;

    /**
     * @since 2.0
     */
    command RunTests(RunTestsArg) returns (RunStatus) = 1;
    /**
     * @since 2.0
     */
    command GetAvailableGroups(Default) returns (GroupList)  = 2;
    /**
     * @since 2.0
     */
    event OnSelftestFinished returns (Default)            = 3;
    /**
     * @since 2.0
     */
    event OnSelftestResult returns (SelftestResult)       = 4;
}

message RunTestsArg
{
    /**
     * Comma-separated list of module names without spaces, for example:
     * "url,util"
     * Can be left blank, or combined with testPattern and excludePattern.
     *
     * @since 2.0
     */
    optional string moduleList = 1;

    /**
     * Specifies a glob-style pattern to filter tests. [group:testname]
     * ie. "util.ZipCache:Check*"
     * Can be left blank, or combined with moduleList and excludePattern.
     *
     * @since 2.0
     */
    optional string testPattern = 2;

    /**
     * Specifies a glob-style pattern to exclude tests. [group:testname]
     * ie. "util.ZipCache:Check*". This will take precedence over testPattern
     * if both are specified.
     *
     * @since 2.0
     */
    optional string excludePattern = 3;
}

message RunStatus
{
    enum RunTestStatus
    {
        /**
         * If we found any tests specified through RunTestsArg we will be RUNNING them.
         */
        RUNNING       = 1;
        /**
         * Returned if no tests are found.
         */
        NOT_AVAILABLE = 2;
    }
    required RunTestStatus status = 1;
}

message GroupInformation
{
    required string name   = 1;
    required string module = 2;
}

/**
 * The list of available selftest groups
 */
message GroupList
{
    repeated GroupInformation groupList = 1;
}

/**
 * Information about a testrun.
 */
message SelftestResult
{
    /**
     * Name of finished test.
     */
    required string testname    = 1;
    /**
     * Name of group.
     */
    required string groupname   = 2;
    /**
     * Filename the test is located in.
     */
    required string filename    = 3;
    /**
     * Result of test run.
     */
    required Result result      = 4;

    enum Result
    {
        PASS = 1;
        FAIL = 2;
        SKIP = 3;
    }

    /**
     * If `result` is FAIL or SKIP a descriptive text is given.
     */
    optional string reason      = 5;

    /**
     * The linenumber, if available, where it failed.
     */
    optional uint32 linenumber  = 6 [default = 0];
}
